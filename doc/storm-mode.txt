==============================================================================
Introduction                                                   *storm-mode.nvim*

storm-mode.nvim is a plugin for utilizing the built-in LSP features in the
Storm compiler. It helps you get syntax highlighting, debugging output, and
find documentation for all the languages in Storm.

Getting started:
  1. Download the Storm compiler. You can do this either from the Debian or
     Ubuntu package repositories. Alternatively a binary release is available
     at https://storm-lang.org/Downloads/index.html
  2. Make sure the plugin is being loaded in your config. If you downloaded
     the binary release manually you will have to call the setup function and
     provide the location of those files.
>lua
     -- If you unpacked the .tar.gz file to /home/user1/projects/storm-lang:
     require('storm-mode').setup({
        compiler = '/home/user1/projects/storm-lang/storm',
        root = '/home/user1/projects/storm-lang/root/',
     })
<
     See |storm-mode.config| for a list of all the options.
  3. Run `:checkhealth storm-mode` to look for errors in your configuration.
  4. Check |storm-mode.commands| for a list of commands to use with Storm.

  To learn more, visit https://storm-lang.org/


==============================================================================
Setup configuration                                          *storm-mode.config*

storm-mode.setup({opts})                                    *storm-mode.setup()*
    Setup function to configure storm-mode. This function only sets the
    configuration values, as the rest of the plugin is already lazily loaded
    on |storm-mode.commands|.
<
    Parameters: ~
      • {opts?} (table)  Configuration options

    Options: ~
      • {compiler?}   (string)  Path to the Storm compiler
	                        Defaults to `/usr/bin/storm`
      • {root?}       (string)  Path to the Storm root directory
	                        Defaults to `/usr/lib/storm/`
      • {highlights?} (table)   A list of highlight groups to use
                                See |storm-mode.defaults.highlights| for a
                                list of available keys

                                                *storm-mode.defaults.highlights*
    highlights: ~
        Fields:
          • {comment?}:   (string)  Comment highlight
                                    Defaults to 'Comment'
          • {delimiter?}: (string)  Delimiter highlight
                                    Defaults to 'Delimiter'
          • {string?}:    (string)  String highlight
                                    Defaults to 'String'
          • {constant?}:  (string)  Constant highlight
                                    Defaults to 'Constant'
          • {keyword?}:   (string)  Keyword highlight
                                    Defaults to 'Keyword'
          • {fn-name?}:   (string)  Function name highlight
                                    Defaults to 'Function'
          • {var-name?}:  (string)  Variable name highlight
                                    Defaults to 'Identifier'
          • {type-name?}: (string)  Type name highlight
                                    Defaults to 'Type'


==============================================================================
Commands                                                   *storm-mode.commands*

 `:Storm {command {arg?}}`

 command       action
------------------------------------------------------------------------------

 start         Start storm-mode for the current buffer.

 close         Stop storm-mode for the current buffer.

 quit          Force stop the compiler, stopping storm-mode for all buffers.

 global        Queries the compiler to determine whether to enable storm-mode
               in any current buffer, as well as any future buffers. This uses
               the extension of the buffer name. Setting an autocommand to run
               `:Storm start` on other filetypes lets you set your own rules
               instead. Example: >lua
               vim.api.nvim_create_autocmd('BufEnter', {
                   pattern = '*.bs',
                   command = ':Storm start',
               })
<
 debug {type}  Query debug information or request retransmission of data.
               {type}:
                 - tree
                   Output debug information containing the syntax tree for the
                   current buffer.
                 - error
                   Output the first syntax error in the current buffer.
                 - content
                   Output debug information of the contents in the current
                   buffer.
                 - recolor
                   Recolor the current buffer.


vim:tw=78:ts=8:noet:ft=help:norl:
